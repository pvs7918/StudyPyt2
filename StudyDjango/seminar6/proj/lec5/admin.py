from django.contrib import admin

# Register your models here.

from django.contrib import admin
from .models import Category, Product


# Первая строка импортирует доступ к административным свойствам и методам.
# Далее импортируем классы моделей, которые создали ранее.


# Помимо стандартного удаления можно создать собственные методы, которые
# расширят список возможных действий над группой выбранных объектов.
# Пропишем в admin.py метод сбрасывания количества товаров в ноль.
@admin.action(description="Сбросить количество в ноль")
def reset_quantity(modeladmin, request, queryset):
    queryset.update(quantity=0)


class ProductAdmin(admin.ModelAdmin):
    list_display = ['name', 'category', 'quantity']  # список полей для отображения в Админ.панели

    readonly_fields = ['date_added', 'rating']  # поля только для чтения

    ordering = ['category', '-quantity']  # Сортировка
    list_filter = ['date_added', 'price']  # Фильтрация
    search_fields = ['description']  # текстовый поиск
    search_help_text = 'Поиск по полю Описание продукта (description)'
    actions = [reset_quantity]

    # fields = ['name', 'description', 'category', 'date_added', 'rating']  """Отдельный продукт."""
    # Если необходимо более индивидуально настроит отображение полей модели, можно воспользоваться
    # переменной fieldsets. Рассмотрим вариант представления, который задействует максимум возможностей
    # формы.
    fieldsets = [
        (
            None,
            {
                'classes': ['wide'],
                'fields': ['name'],
            },
        ),
        (
            'Подробности',
            {
                'classes': ['collapse'],
                'description': 'Категория товара и его подробное описание',
                'fields': ['category', 'description'],
            },
        ),
        (
            'Бухгалтерия',
            {
                'fields': ['price', 'quantity'],
            }
        ),
        (
            'Рейтинг и прочее',
            {
                'description': 'Рейтинг сформирован автоматически на основе оценок покупателей',
                'fields': ['rating', 'date_added'],
            }
        ),
    ]

    # Новый список можно упорядочить. При клике по заголовку столбца срабатывает сортировка.Текстовые
    # поля сортируются по алфавиту, числовые по значению, дата и время по хронологии.При этом
    # никакой код писать не нужно. Возможны сортировки по убыванию и по возрастанию значения.Кроме
    # того возможна сложная сортировка по нескольким полям. Но мы можем прописать сортировку по
    # умолчанию в коде административной модели, файле admin.py приложения.


admin.site.register(Category)
admin.site.register(Product, ProductAdmin)

# Две нижние строки регистрируют модели в административной панели сайта.
# Запускаем сервер  python manage.py runserver
# и переходим в админ панель http://127.0.0.1:8000/admin
# Теперь мы видим раздел с именем приложения и таблицы категории и продукта с
# стандартными кнопками добавить и изменить.

# Класс ProductAdmin создаём как дочерний для
# admin.ModelAdmin. Он позволит изменить работу с продуктами в админке, не меняя
# модель Продукты. Следовательно нам не надо делать миграции, вносить изменения
# в базу данных.
# Переменная list_display является зарезервированным именем. Django
# автоматически найдёт её и прочитает содержимое списка. Как вы догадались, в
# списке имена полей модели Продукты. Помимо имени мы хотим видеть категорию
# продукта и сколько его осталось на складе.
# Обновим страницу http://127.0.0.1:8000/admin/myapp5/product/ Django отоброжает
# три стобца, вместо одного.
